//DAA 3 Fractional Knapsack
import java.util.*;
class Item {
  int value, weight;
  Item(int val, int wgt) {
    this.value = val;
    this.weight = wgt;
  }
}
class itemComp implements Comparator<Item>{
    public int compare(Item a, Item b){
        double des1 = (double)(a.value) / (double)(a.weight); 
        double des2 = (double)(b.value) / (double)(b.weight); 
        if(des1 < des2) return 1; 
        else if(des1 > des2) return -1; 
        else return 0; 
    }
}
class factionalKanapsack{
    static double fractKnap(int W, Item arr[], int n){
        Arrays.sort(arr, new itemComp()); 
        int curWeight = 0; 
        double finalvalue = 0.0; 
        for (int i = 0; i < n; i++) {
            if (curWeight + arr[i].weight <= W) {
                curWeight += arr[i].weight;
                finalvalue += arr[i].value;
            }
            else {
                int remain = W - curWeight;
                finalvalue += ((double)arr[i].value / (double)arr[i].weight) * (double)remain;
                break;
            }
        }
        return finalvalue;
    }
    public static void main(String args[]){
        int n = 4, weight = 80;
        Item arr[] = {new Item (60,30),new Item(30,20),new Item(120,10),new Item (90,30)};
        double result = fractKnap(weight, arr, n);
        System.out.println("The maximum value is "+result);
    }
}